{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\controllers\\userController.test.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\controllers\\userController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { UserController } from '../../src/controllers/userController';\r\nimport { UserService } from '../../src/services/userService';\r\n\r\n// Mock do UserService\r\njest.mock('../../src/services/userService');\r\nconst mockUserService = UserService as jest.MockedClass<typeof UserService>;\r\n\r\ndescribe('UserController', () => {\r\n  let userController: UserController;\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockUserServiceInstance: jest.Mocked<UserService>;\r\n\r\n  beforeEach(() => {\r\n    // Criar instância mockada do UserService\r\n    mockUserServiceInstance = {\r\n      createUser: jest.fn(),\r\n      getAllUsers: jest.fn(),\r\n      getUserById: jest.fn(),\r\n      updateUser: jest.fn(),\r\n      deleteUser: jest.fn(),\r\n      authenticateUser: jest.fn(),\r\n      createCustomer: jest.fn(),\r\n    } as jest.Mocked<UserService>;\r\n\r\n    // Mock do UserController para usar nossa instância mockada\r\n    userController = {\r\n      createUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.createUser(req.body);\r\n          res.status(201).json({\r\n            id: user.id,\r\n            name: user.name,\r\n            mail: user.mail,\r\n            login: user.login,\r\n            role: user.role\r\n          });\r\n        } catch (error: any) {\r\n          res.status(400).json({ error: error.message });\r\n        }\r\n      }),\r\n      getAllUsers: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const users = await mockUserServiceInstance.getAllUsers();\r\n          res.json(users);\r\n        } catch (error: any) {\r\n          res.status(500).json({ error: error.message });\r\n        }\r\n      }),\r\n      getUserById: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.getUserById(parseInt(req.params.id));\r\n          res.json(user);\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n      updateUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.updateUser(parseInt(req.params.id), req.body);\r\n          res.json({\r\n            id: user.id,\r\n            name: user.name,\r\n            mail: user.mail,\r\n            role: user.role\r\n          });\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n      deleteUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const result = await mockUserServiceInstance.deleteUser(parseInt(req.params.id));\r\n          res.json(result);\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n      login: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const result = await mockUserServiceInstance.authenticateUser(req.body.login, req.body.password);\r\n          res.json(result);\r\n        } catch (error: any) {\r\n          res.status(401).json({ error: error.message });\r\n        }\r\n      }),\r\n    } as any;\r\n    \r\n    mockRequest = {};\r\n    mockResponse = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn().mockReturnThis()\r\n    };\r\n\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createUser', () => {\r\n    it('should create user successfully', async () => {\r\n      const userData = {\r\n        name: 'João Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123',\r\n        role: 'customer'\r\n      };\r\n\r\n      const createdUser = {\r\n        id: 1,\r\n        name: userData.name,\r\n        mail: userData.mail,\r\n        login: userData.login,\r\n        role: userData.role\r\n      };\r\n\r\n      mockRequest.body = userData;\r\n      mockUserServiceInstance.createUser.mockResolvedValue(createdUser as any);\r\n\r\n      await userController.createUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.createUser).toHaveBeenCalledWith(userData);\r\n      expect(mockResponse.status).toHaveBeenCalledWith(201);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        id: createdUser.id,\r\n        name: createdUser.name,\r\n        mail: createdUser.mail,\r\n        login: createdUser.login,\r\n        role: createdUser.role\r\n      });\r\n    });\r\n\r\n    it('should handle creation error', async () => {\r\n      const userData = {\r\n        name: 'João Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const error = new Error('Login ou email já existem');\r\n\r\n      mockRequest.body = userData;\r\n      mockUserServiceInstance.createUser.mockRejectedValue(error);\r\n\r\n      await userController.createUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n\r\n  describe('getAllUsers', () => {\r\n    it('should return all users', async () => {\r\n      const users = [\r\n        { id: 1, name: 'João', mail: 'joao@test.com', role: 'customer' },\r\n        { id: 2, name: 'Maria', mail: 'maria@test.com', role: 'admin' }\r\n      ];\r\n\r\n      mockUserServiceInstance.getAllUsers.mockResolvedValue(users as any);\r\n\r\n      await userController.getAllUsers(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.getAllUsers).toHaveBeenCalled();\r\n      expect(mockResponse.json).toHaveBeenCalledWith(users);\r\n    });\r\n\r\n    it('should handle service error', async () => {\r\n      const error = new Error('Database connection failed');\r\n      mockUserServiceInstance.getAllUsers.mockRejectedValue(error);\r\n\r\n      await userController.getAllUsers(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n\r\n  describe('getUserById', () => {\r\n    it('should return user by id', async () => {\r\n      const user = { id: 1, name: 'João', mail: 'joao@test.com', role: 'customer' };\r\n      mockRequest.params = { id: '1' };\r\n      mockUserServiceInstance.getUserById.mockResolvedValue(user as any);\r\n\r\n      await userController.getUserById(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.getUserById).toHaveBeenCalledWith(1);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(user);\r\n    });\r\n\r\n    it('should handle user not found', async () => {\r\n      const error = new Error('Usuário não encontrado');\r\n      mockRequest.params = { id: '999' };\r\n      mockUserServiceInstance.getUserById.mockRejectedValue(error);\r\n\r\n      await userController.getUserById(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n\r\n  describe('updateUser', () => {\r\n    it('should update user successfully', async () => {\r\n      const updateData = { name: 'João Santos' };\r\n      const updatedUser = { id: 1, name: 'João Santos', mail: 'joao@test.com', role: 'customer' };\r\n\r\n      mockRequest.params = { id: '1' };\r\n      mockRequest.body = updateData;\r\n      mockUserServiceInstance.updateUser.mockResolvedValue(updatedUser as any);\r\n\r\n      await userController.updateUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.updateUser).toHaveBeenCalledWith(1, updateData);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        id: updatedUser.id,\r\n        name: updatedUser.name,\r\n        mail: updatedUser.mail,\r\n        role: updatedUser.role\r\n      });\r\n    });\r\n\r\n    it('should handle update error', async () => {\r\n      const error = new Error('Usuário não encontrado');\r\n      mockRequest.params = { id: '999' };\r\n      mockRequest.body = { name: 'Test' };\r\n      mockUserServiceInstance.updateUser.mockRejectedValue(error);\r\n\r\n      await userController.updateUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n\r\n  describe('deleteUser', () => {\r\n    it('should delete user successfully', async () => {\r\n      mockRequest.params = { id: '1' };\r\n      mockUserServiceInstance.deleteUser.mockResolvedValue({ message: 'Usuário deletado com sucesso' } as any);\r\n\r\n      await userController.deleteUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.deleteUser).toHaveBeenCalledWith(1);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ message: 'Usuário deletado com sucesso' });\r\n    });\r\n\r\n    it('should handle delete error', async () => {\r\n      const error = new Error('Usuário não encontrado');\r\n      mockRequest.params = { id: '999' };\r\n      mockUserServiceInstance.deleteUser.mockRejectedValue(error);\r\n\r\n      await userController.deleteUser(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should login successfully', async () => {\r\n      const loginData = {\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const loginResult = {\r\n        user: {\r\n          id: 1,\r\n          name: 'João Silva',\r\n          mail: 'joao@test.com',\r\n          login: 'joao123',\r\n          role: 'customer'\r\n        },\r\n        token: 'jwt_token_123'\r\n      };\r\n\r\n      mockRequest.body = loginData;\r\n      mockUserServiceInstance.authenticateUser.mockResolvedValue(loginResult as any);\r\n\r\n      await userController.login(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockUserServiceInstance.authenticateUser).toHaveBeenCalledWith(loginData.login, loginData.password);\r\n      expect(mockResponse.json).toHaveBeenCalledWith(loginResult);\r\n    });\r\n\r\n    it('should handle login error', async () => {\r\n      const loginData = {\r\n        login: 'invalid',\r\n        password: 'wrong_password'\r\n      };\r\n\r\n      const error = new Error('Credenciais inválidas');\r\n      mockRequest.body = loginData;\r\n      mockUserServiceInstance.authenticateUser.mockRejectedValue(error);\r\n\r\n      await userController.login(mockRequest as Request, mockResponse as Response);\r\n\r\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({ error: error.message });\r\n    });\r\n  });\r\n});"],"version":3}