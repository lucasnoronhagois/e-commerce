{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\models\\User.test.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\models\\User.test.ts"],"sourcesContent":["import User from '../../src/models/User';\r\n\r\n// Mock do Sequelize\r\nconst mockSequelize = {\r\n  define: jest.fn(),\r\n  sync: jest.fn(),\r\n  authenticate: jest.fn(),\r\n  close: jest.fn()\r\n};\r\n\r\n// Mock do Model\r\nconst mockModel = {\r\n  init: jest.fn(),\r\n  create: jest.fn(),\r\n  findAll: jest.fn(),\r\n  findByPk: jest.fn(),\r\n  findOne: jest.fn(),\r\n  bulkCreate: jest.fn(),\r\n  destroy: jest.fn(),\r\n  associate: jest.fn()\r\n};\r\n\r\ndescribe('User Model', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('User Creation', () => {\r\n    it('should create a user with valid data', async () => {\r\n      const userData = {\r\n        name: 'João Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123',\r\n        role: 'customer'\r\n      };\r\n\r\n      const createdUser = {\r\n        id: 1,\r\n        ...userData,\r\n        is_deleted: false,\r\n        created_at: new Date(),\r\n        updated_at: new Date()\r\n      };\r\n\r\n      mockModel.create.mockResolvedValue(createdUser);\r\n\r\n      const result = await mockModel.create(userData);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.id).toBe(1);\r\n      expect(result.name).toBe(userData.name);\r\n      expect(result.mail).toBe(userData.mail);\r\n      expect(result.login).toBe(userData.login);\r\n      expect(result.role).toBe(userData.role);\r\n      expect(result.is_deleted).toBe(false);\r\n    });\r\n\r\n    it('should set default role as customer', async () => {\r\n      const userData = {\r\n        name: 'Maria Santos',\r\n        mail: 'maria@test.com',\r\n        login: 'maria123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const createdUser = {\r\n        id: 1,\r\n        ...userData,\r\n        role: 'customer'\r\n      };\r\n\r\n      mockModel.create.mockResolvedValue(createdUser);\r\n\r\n      const result = await mockModel.create(userData);\r\n\r\n      expect(result.role).toBe('customer');\r\n    });\r\n\r\n    it('should handle creation errors', async () => {\r\n      const userData = {\r\n        name: 'João Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const error = new Error('Validation error');\r\n      mockModel.create.mockRejectedValue(error);\r\n\r\n      await expect(mockModel.create(userData)).rejects.toThrow('Validation error');\r\n    });\r\n  });\r\n\r\n  describe('User Queries', () => {\r\n    it('should find user by id', async () => {\r\n      const user = { id: 1, name: 'João Silva', mail: 'joao@test.com', role: 'customer' };\r\n      mockModel.findByPk.mockResolvedValue(user);\r\n\r\n      const result = await mockModel.findByPk(1);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.name).toBe('João Silva');\r\n    });\r\n\r\n    it('should find user by email', async () => {\r\n      const user = { id: 1, name: 'Maria Santos', mail: 'maria@test.com', role: 'admin' };\r\n      mockModel.findOne.mockResolvedValue(user);\r\n\r\n      const result = await mockModel.findOne({ where: { mail: 'maria@test.com' } });\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.name).toBe('Maria Santos');\r\n      expect(result.role).toBe('admin');\r\n    });\r\n\r\n    it('should find all users', async () => {\r\n      const users = [\r\n        { id: 1, name: 'João', mail: 'joao@test.com', role: 'customer' },\r\n        { id: 2, name: 'Maria', mail: 'maria@test.com', role: 'admin' }\r\n      ];\r\n\r\n      mockModel.findAll.mockResolvedValue(users);\r\n\r\n      const result = await mockModel.findAll();\r\n\r\n      expect(result).toHaveLength(2);\r\n    });\r\n\r\n    it('should find only active users', async () => {\r\n      const activeUsers = [\r\n        { id: 1, name: 'João', is_deleted: false },\r\n        { id: 2, name: 'Maria', is_deleted: false }\r\n      ];\r\n\r\n      mockModel.findAll.mockResolvedValue(activeUsers);\r\n\r\n      const result = await mockModel.findAll({ where: { is_deleted: false } });\r\n\r\n      expect(result).toHaveLength(2);\r\n    });\r\n\r\n    it('should find users by role', async () => {\r\n      const customers = [\r\n        { id: 1, name: 'João', role: 'customer' },\r\n        { id: 2, name: 'Pedro', role: 'customer' }\r\n      ];\r\n\r\n      mockModel.findAll.mockResolvedValue(customers);\r\n\r\n      const result = await mockModel.findAll({ where: { role: 'customer' } });\r\n\r\n      expect(result).toHaveLength(2);\r\n    });\r\n  });\r\n\r\n  describe('User Updates', () => {\r\n    it('should update user data', async () => {\r\n      const updateData = { name: 'João Santos' };\r\n      const updatedUser = { id: 1, name: 'João Santos', mail: 'joao@test.com' };\r\n\r\n      const mockUser = {\r\n        update: jest.fn().mockResolvedValue(updatedUser)\r\n      };\r\n\r\n      mockModel.findByPk.mockResolvedValue(mockUser);\r\n\r\n      const user = await mockModel.findByPk(1);\r\n      const result = await user.update(updateData);\r\n\r\n      expect(result.name).toBe('João Santos');\r\n    });\r\n\r\n    it('should soft delete user', async () => {\r\n      const mockUser = {\r\n        update: jest.fn().mockResolvedValue({ id: 1, is_deleted: true })\r\n      };\r\n\r\n      mockModel.findByPk.mockResolvedValue(mockUser);\r\n\r\n      const user = await mockModel.findByPk(1);\r\n      const result = await user.update({ is_deleted: true });\r\n\r\n      expect(result.is_deleted).toBe(true);\r\n    });\r\n  });\r\n});"],"version":3}