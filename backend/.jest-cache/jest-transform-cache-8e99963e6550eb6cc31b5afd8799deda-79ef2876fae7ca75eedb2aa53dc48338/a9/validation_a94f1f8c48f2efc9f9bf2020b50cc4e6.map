{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\src\\middlewares\\validation.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAA2B;AAEpB,MAAM,QAAQ,GAAG,CAAC,MAA6B,EAAE,EAAE;IACxD,OAAO,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YACvD,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,GAAG,CAAC,eAAe,EAAE,CAAC;gBACzC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,QAAQ,YAanB;AAEK,MAAM,cAAc,GAAG,CAAC,MAA6B,EAAE,EAAE;IAC9D,OAAO,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YACzD,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,GAAG,CAAC,eAAe,EAAE,CAAC;gBACzC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,cAAc,kBAazB","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\src\\middlewares\\validation.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport * as yup from 'yup';\r\n\r\nexport const validate = (schema: yup.ObjectSchema<any>) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validate(req.body, { abortEarly: false });\r\n      return next();\r\n    } catch (error) {\r\n      if (error instanceof yup.ValidationError) {\r\n        const errors = error.errors.map(err => ({ message: err }));\r\n        return res.status(400).json({ errors });\r\n      }\r\n      return res.status(500).json({ error: 'Erro interno do servidor' });\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateParams = (schema: yup.ObjectSchema<any>) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validate(req.params, { abortEarly: false });\r\n      return next();\r\n    } catch (error) {\r\n      if (error instanceof yup.ValidationError) {\r\n        const errors = error.errors.map(err => ({ message: err }));\r\n        return res.status(400).json({ errors });\r\n      }\r\n      return res.status(500).json({ error: 'Erro interno do servidor' });\r\n    }\r\n  };\r\n};\r\n"],"version":3}