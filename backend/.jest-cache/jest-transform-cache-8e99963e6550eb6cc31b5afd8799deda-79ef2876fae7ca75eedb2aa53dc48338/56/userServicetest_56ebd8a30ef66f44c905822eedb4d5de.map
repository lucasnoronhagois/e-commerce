{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\services\\userService.test.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\services\\userService.test.ts"],"sourcesContent":["import { UserService } from '../../src/services/userService';\r\nimport User from '../../src/models/User';\r\nimport { CustomerDetail } from '../../src/models';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Mock dos modelos\r\njest.mock('../../src/models/User');\r\njest.mock('../../src/models/CustomerDetail');\r\njest.mock('bcrypt');\r\njest.mock('jsonwebtoken');\r\n\r\nconst mockUser = User as jest.Mocked<typeof User>;\r\nconst mockCustomerDetail = CustomerDetail as jest.Mocked<typeof CustomerDetail>;\r\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\r\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\r\n\r\ndescribe('UserService', () => {\r\n  let userService: UserService;\r\n\r\n  beforeEach(() => {\r\n    userService = new UserService();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createUser', () => {\r\n    it('should create a user successfully', async () => {\r\n      const userData = {\r\n        name: 'Jo√£o Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123',\r\n        role: 'customer'\r\n      };\r\n\r\n      const hashedPassword = 'hashed_password_123';\r\n      const createdUser = {\r\n        id: 1,\r\n        ...userData,\r\n        password: hashedPassword,\r\n        is_deleted: false,\r\n        created_at: new Date(),\r\n        updated_at: new Date()\r\n      };\r\n\r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n      mockUser.findOne.mockResolvedValue(null);\r\n      mockUser.create.mockResolvedValue(createdUser as any);\r\n\r\n      const result = await userService.createUser(userData);\r\n\r\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(userData.password, 10);\r\n      expect(mockUser.findOne).toHaveBeenCalledWith({\r\n        where: expect.objectContaining({\r\n          [Symbol.for('or')]: [\r\n            { login: userData.login },\r\n            { mail: userData.mail }\r\n          ]\r\n        })\r\n      });\r\n      expect(mockUser.create).toHaveBeenCalledWith({\r\n        ...userData,\r\n        password: hashedPassword,\r\n        role: 'customer'\r\n      });\r\n      expect(result).toEqual(createdUser);\r\n    });\r\n\r\n    it('should throw error if user already exists', async () => {\r\n      const userData = {\r\n        name: 'Jo√£o Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const existingUser = { id: 1, login: 'joao123' };\r\n      mockUser.findOne.mockResolvedValue(existingUser as any);\r\n\r\n      await expect(userService.createUser(userData)).rejects.toThrow('Login ou email j√° existem');\r\n    });\r\n\r\n    it('should set default role as customer', async () => {\r\n      const userData = {\r\n        name: 'Jo√£o Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const hashedPassword = 'hashed_password_123';\r\n      const createdUser = {\r\n        id: 1,\r\n        ...userData,\r\n        password: hashedPassword,\r\n        role: 'customer'\r\n      };\r\n\r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n      mockUser.findOne.mockResolvedValue(null);\r\n      mockUser.create.mockResolvedValue(createdUser as any);\r\n\r\n      await userService.createUser(userData);\r\n\r\n      expect(mockUser.create).toHaveBeenCalledWith({\r\n        ...userData,\r\n        password: hashedPassword,\r\n        role: 'customer'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getAllUsers', () => {\r\n    it('should return all users', async () => {\r\n      const users = [\r\n        { id: 1, name: 'Jo√£o', mail: 'joao@test.com', role: 'customer' },\r\n        { id: 2, name: 'Maria', mail: 'maria@test.com', role: 'admin' }\r\n      ];\r\n\r\n      mockUser.findAll.mockResolvedValue(users as any);\r\n\r\n      const result = await userService.getAllUsers();\r\n\r\n      expect(mockUser.findAll).toHaveBeenCalledWith({\r\n        where: { is_deleted: false },\r\n        attributes: { exclude: ['password'] }\r\n      });\r\n      expect(result).toEqual(users);\r\n    });\r\n  });\r\n\r\n  describe('getUserById', () => {\r\n    it('should return user by id', async () => {\r\n      const user = { id: 1, name: 'Jo√£o', mail: 'joao@test.com', role: 'customer' };\r\n      mockUser.findOne.mockResolvedValue(user as any);\r\n\r\n      const result = await userService.getUserById(1);\r\n\r\n      expect(mockUser.findOne).toHaveBeenCalledWith({\r\n        where: { id: 1, is_deleted: false },\r\n        attributes: { exclude: ['password'] }\r\n      });\r\n      expect(result).toEqual(user);\r\n    });\r\n\r\n    it('should throw error if user not found', async () => {\r\n      mockUser.findOne.mockResolvedValue(null);\r\n\r\n      await expect(userService.getUserById(999)).rejects.toThrow('Usu√°rio n√£o encontrado');\r\n    });\r\n  });\r\n\r\n  describe('updateUser', () => {\r\n    it('should update user successfully', async () => {\r\n      const userData = { name: 'Jo√£o Santos' };\r\n      const existingUser = {\r\n        id: 1,\r\n        name: 'Jo√£o Silva',\r\n        mail: 'joao@test.com',\r\n        update: jest.fn().mockResolvedValue({ id: 1, ...userData })\r\n      };\r\n\r\n      mockUser.findOne.mockResolvedValue(existingUser as any);\r\n\r\n      const result = await userService.updateUser(1, userData);\r\n\r\n      expect(existingUser.update).toHaveBeenCalledWith(userData);\r\n      expect(result).toEqual({ id: 1, ...userData });\r\n    });\r\n\r\n    it('should throw error if user not found', async () => {\r\n      mockUser.findOne.mockResolvedValue(null);\r\n\r\n      await expect(userService.updateUser(999, { name: 'Test' })).rejects.toThrow('Usu√°rio n√£o encontrado');\r\n    });\r\n  });\r\n\r\n  describe('deleteUser', () => {\r\n    it('should soft delete user', async () => {\r\n      const existingUser = {\r\n        id: 1,\r\n        name: 'Jo√£o Silva',\r\n        update: jest.fn().mockResolvedValue({ id: 1, is_deleted: true })\r\n      };\r\n\r\n      mockUser.findOne.mockResolvedValue(existingUser as any);\r\n\r\n      const result = await userService.deleteUser(1);\r\n\r\n      expect(existingUser.update).toHaveBeenCalledWith({ is_deleted: true });\r\n      expect(result).toEqual({ message: 'Usu√°rio deletado com sucesso' });\r\n    });\r\n\r\n    it('should throw error if user not found', async () => {\r\n      mockUser.findOne.mockResolvedValue(null);\r\n\r\n      await expect(userService.deleteUser(999)).rejects.toThrow('Usu√°rio n√£o encontrado');\r\n    });\r\n  });\r\n\r\n  describe('authenticateUser', () => {\r\n    it('should authenticate user successfully with valid credentials', async () => {\r\n      const login = 'joao123';\r\n      const password = 'password123';\r\n\r\n      const user = {\r\n        id: 1,\r\n        name: 'Jo√£o Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'hashed_password',\r\n        role: 'customer'\r\n      };\r\n\r\n      const token = 'jwt_token_123';\r\n\r\n      mockUser.findOne.mockResolvedValue(user as any);\r\n      mockBcrypt.compare.mockResolvedValue(true as never);\r\n      mockJwt.sign.mockReturnValue(token as never);\r\n\r\n      const result = await userService.authenticateUser(login, password);\r\n\r\n      expect(mockUser.findOne).toHaveBeenCalledWith({\r\n        where: { login, is_deleted: false },\r\n        include: [{ association: 'customerDetail', required: false }]\r\n      });\r\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(password, user.password);\r\n      expect(mockJwt.sign).toHaveBeenCalledWith(\r\n        { id: user.id, login: user.login, role: user.role },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: process.env.JWT_EXPIRES_IN }\r\n      );\r\n      expect(result).toEqual({\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          mail: user.mail,\r\n          login: user.login,\r\n          role: user.role\r\n        },\r\n        token\r\n      });\r\n    });\r\n\r\n    it('should throw error for invalid login', async () => {\r\n      const login = 'invalid';\r\n      const password = 'password123';\r\n\r\n      mockUser.findOne.mockResolvedValue(null);\r\n\r\n      await expect(userService.authenticateUser(login, password)).rejects.toThrow('Credenciais inv√°lidas');\r\n    });\r\n\r\n    it('should throw error for invalid password', async () => {\r\n      const login = 'joao123';\r\n      const password = 'wrong_password';\r\n\r\n      const user = {\r\n        id: 1,\r\n        name: 'Jo√£o Silva',\r\n        password: 'hashed_password'\r\n      };\r\n\r\n      mockUser.findOne.mockResolvedValue(user as any);\r\n      mockBcrypt.compare.mockResolvedValue(false as never);\r\n\r\n      await expect(userService.authenticateUser(login, password)).rejects.toThrow('Credenciais inv√°lidas');\r\n    });\r\n  });\r\n});\r\n"],"version":3}