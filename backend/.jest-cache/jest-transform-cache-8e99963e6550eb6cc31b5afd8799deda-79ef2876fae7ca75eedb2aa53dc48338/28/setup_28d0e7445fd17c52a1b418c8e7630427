23073a00b6a5fc55a494a29b3cfb879f
"use strict";
// Mock do banco de dados para testes
jest.mock('../src/config/database', () => ({
    loadModels: jest.fn(() => ({})),
}));
// Mock do Cloudinary
jest.mock('cloudinary', () => ({
    v2: {
        config: jest.fn(),
        uploader: {
            upload: jest.fn(() => Promise.resolve({
                public_id: 'test_id',
                secure_url: 'https://test.com/image.jpg',
                width: 800,
                height: 600
            })),
            destroy: jest.fn(() => Promise.resolve({ result: 'ok' }))
        }
    }
}));
// Mock do Sharp
jest.mock('sharp', () => {
    return jest.fn(() => ({
        resize: jest.fn().mockReturnThis(),
        jpeg: jest.fn().mockReturnThis(),
        png: jest.fn().mockReturnThis(),
        toBuffer: jest.fn(() => Promise.resolve(Buffer.from('test'))),
        metadata: jest.fn(() => Promise.resolve({
            width: 800,
            height: 600,
            format: 'jpeg'
        }))
    }));
});
// Configurar variáveis de ambiente para testes
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-secret-key';
process.env.JWT_EXPIRES_IN = '1h';
process.env.DB_NAME = 'test_db';
process.env.DB_USER = 'test_user';
process.env.DB_PASSWORD = 'test_password';
process.env.DB_HOST = 'localhost';
process.env.DB_PORT = '3306';
// Limpar mocks após cada teste
afterEach(() => {
    jest.clearAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXEN1cnNvIEpTXFxEZXBsb3lcXENvbW1lcmNlXFxiYWNrZW5kXFx0ZXN0c1xcc2V0dXAudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHFDQUFxQztBQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDekMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNoQyxDQUFDLENBQUMsQ0FBQztBQUVKLHFCQUFxQjtBQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLEVBQUUsRUFBRTtRQUNGLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2pCLFFBQVEsRUFBRTtZQUNSLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixVQUFVLEVBQUUsNEJBQTRCO2dCQUN4QyxLQUFLLEVBQUUsR0FBRztnQkFDVixNQUFNLEVBQUUsR0FBRzthQUNaLENBQUMsQ0FBQztZQUNILE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMxRDtLQUNGO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixnQkFBZ0I7QUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2hDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQy9CLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzdELFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDdEMsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsR0FBRztZQUNYLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILCtDQUErQztBQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUM7QUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFFN0IsK0JBQStCO0FBQy9CLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRTpcXEN1cnNvIEpTXFxEZXBsb3lcXENvbW1lcmNlXFxiYWNrZW5kXFx0ZXN0c1xcc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTW9jayBkbyBiYW5jbyBkZSBkYWRvcyBwYXJhIHRlc3Rlc1xyXG5qZXN0Lm1vY2soJy4uL3NyYy9jb25maWcvZGF0YWJhc2UnLCAoKSA9PiAoe1xyXG4gIGxvYWRNb2RlbHM6IGplc3QuZm4oKCkgPT4gKHt9KSksXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgZG8gQ2xvdWRpbmFyeVxyXG5qZXN0Lm1vY2soJ2Nsb3VkaW5hcnknLCAoKSA9PiAoe1xyXG4gIHYyOiB7XHJcbiAgICBjb25maWc6IGplc3QuZm4oKSxcclxuICAgIHVwbG9hZGVyOiB7XHJcbiAgICAgIHVwbG9hZDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgIHB1YmxpY19pZDogJ3Rlc3RfaWQnLFxyXG4gICAgICAgIHNlY3VyZV91cmw6ICdodHRwczovL3Rlc3QuY29tL2ltYWdlLmpwZycsXHJcbiAgICAgICAgd2lkdGg6IDgwMCxcclxuICAgICAgICBoZWlnaHQ6IDYwMFxyXG4gICAgICB9KSksXHJcbiAgICAgIGRlc3Ryb3k6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgcmVzdWx0OiAnb2snIH0pKVxyXG4gICAgfVxyXG4gIH1cclxufSkpO1xyXG5cclxuLy8gTW9jayBkbyBTaGFycFxyXG5qZXN0Lm1vY2soJ3NoYXJwJywgKCkgPT4ge1xyXG4gIHJldHVybiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICByZXNpemU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxyXG4gICAganBlZzogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICBwbmc6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxyXG4gICAgdG9CdWZmZXI6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKEJ1ZmZlci5mcm9tKCd0ZXN0JykpKSxcclxuICAgIG1ldGFkYXRhOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgIHdpZHRoOiA4MDAsXHJcbiAgICAgIGhlaWdodDogNjAwLFxyXG4gICAgICBmb3JtYXQ6ICdqcGVnJ1xyXG4gICAgfSkpXHJcbiAgfSkpO1xyXG59KTtcclxuXHJcbi8vIENvbmZpZ3VyYXIgdmFyacOhdmVpcyBkZSBhbWJpZW50ZSBwYXJhIHRlc3Rlc1xyXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcclxucHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldC1rZXknO1xyXG5wcm9jZXNzLmVudi5KV1RfRVhQSVJFU19JTiA9ICcxaCc7XHJcbnByb2Nlc3MuZW52LkRCX05BTUUgPSAndGVzdF9kYic7XHJcbnByb2Nlc3MuZW52LkRCX1VTRVIgPSAndGVzdF91c2VyJztcclxucHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgPSAndGVzdF9wYXNzd29yZCc7XHJcbnByb2Nlc3MuZW52LkRCX0hPU1QgPSAnbG9jYWxob3N0JztcclxucHJvY2Vzcy5lbnYuREJfUE9SVCA9ICczMzA2JztcclxuXHJcbi8vIExpbXBhciBtb2NrcyBhcMOzcyBjYWRhIHRlc3RlXHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==