{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\setup.ts","mappings":";AAAA,qCAAqC;AACrC,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE,CAAC,CAAC;IACzC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;CAChC,CAAC,CAAC,CAAC;AAEJ,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;IAC7B,EAAE,EAAE;QACF,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,QAAQ,EAAE;YACR,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBACpC,SAAS,EAAE,SAAS;gBACpB,UAAU,EAAE,4BAA4B;gBACxC,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;YACH,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;SAC1D;KACF;CACF,CAAC,CAAC,CAAC;AAEJ,gBAAgB;AAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;IACtB,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACpB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAChC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAC/B,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;YACtC,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;KACJ,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,+CAA+C;AAC/C,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC;AAChC,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,eAAe,CAAC;AAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;AAE7B,+BAA+B;AAC/B,SAAS,CAAC,GAAG,EAAE;IACb,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\setup.ts"],"sourcesContent":["// Mock do banco de dados para testes\r\njest.mock('../src/config/database', () => ({\r\n  loadModels: jest.fn(() => ({})),\r\n}));\r\n\r\n// Mock do Cloudinary\r\njest.mock('cloudinary', () => ({\r\n  v2: {\r\n    config: jest.fn(),\r\n    uploader: {\r\n      upload: jest.fn(() => Promise.resolve({\r\n        public_id: 'test_id',\r\n        secure_url: 'https://test.com/image.jpg',\r\n        width: 800,\r\n        height: 600\r\n      })),\r\n      destroy: jest.fn(() => Promise.resolve({ result: 'ok' }))\r\n    }\r\n  }\r\n}));\r\n\r\n// Mock do Sharp\r\njest.mock('sharp', () => {\r\n  return jest.fn(() => ({\r\n    resize: jest.fn().mockReturnThis(),\r\n    jpeg: jest.fn().mockReturnThis(),\r\n    png: jest.fn().mockReturnThis(),\r\n    toBuffer: jest.fn(() => Promise.resolve(Buffer.from('test'))),\r\n    metadata: jest.fn(() => Promise.resolve({\r\n      width: 800,\r\n      height: 600,\r\n      format: 'jpeg'\r\n    }))\r\n  }));\r\n});\r\n\r\n// Configurar variáveis de ambiente para testes\r\nprocess.env.NODE_ENV = 'test';\r\nprocess.env.JWT_SECRET = 'test-secret-key';\r\nprocess.env.JWT_EXPIRES_IN = '1h';\r\nprocess.env.DB_NAME = 'test_db';\r\nprocess.env.DB_USER = 'test_user';\r\nprocess.env.DB_PASSWORD = 'test_password';\r\nprocess.env.DB_HOST = 'localhost';\r\nprocess.env.DB_PORT = '3306';\r\n\r\n// Limpar mocks após cada teste\r\nafterEach(() => {\r\n  jest.clearAllMocks();\r\n});"],"version":3}