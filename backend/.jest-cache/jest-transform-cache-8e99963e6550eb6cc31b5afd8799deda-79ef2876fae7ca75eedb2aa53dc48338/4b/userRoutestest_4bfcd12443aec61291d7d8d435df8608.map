{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\integration\\userRoutes.test.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\integration\\userRoutes.test.ts"],"sourcesContent":["import request from 'supertest';\r\nimport express from 'express';\r\nimport { UserController } from '../../src/controllers/userController';\r\nimport { UserService } from '../../src/services/userService';\r\n\r\n// Mock do UserService\r\njest.mock('../../src/services/userService');\r\nconst mockUserService = UserService as jest.MockedClass<typeof UserService>;\r\n\r\ndescribe('User Routes Integration', () => {\r\n  let app: express.Application;\r\n  let mockUserServiceInstance: jest.Mocked<UserService>;\r\n\r\n  beforeEach(() => {\r\n    app = express();\r\n    app.use(express.json());\r\n    \r\n    // Criar instância mockada do UserService\r\n    mockUserServiceInstance = {\r\n      authenticateUser: jest.fn(),\r\n      getAllUsers: jest.fn(),\r\n      getUserById: jest.fn(),\r\n      createUser: jest.fn(),\r\n      updateUser: jest.fn(),\r\n      deleteUser: jest.fn(),\r\n      createCustomer: jest.fn(),\r\n    } as jest.Mocked<UserService>;\r\n    \r\n    // Mock do UserController para usar nossa instância mockada\r\n    const userController = {\r\n      login: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const result = await mockUserServiceInstance.authenticateUser(req.body.login, req.body.password);\r\n          res.json(result);\r\n        } catch (error: any) {\r\n          res.status(401).json({ error: error.message });\r\n        }\r\n      }),\r\n      getAllUsers: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const users = await mockUserServiceInstance.getAllUsers();\r\n          res.json(users);\r\n        } catch (error: any) {\r\n          res.status(500).json({ error: error.message });\r\n        }\r\n      }),\r\n      getUserById: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.getUserById(parseInt(req.params.id));\r\n          res.json(user);\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n      createUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.createUser(req.body);\r\n          res.status(201).json({\r\n            id: user.id,\r\n            name: user.name,\r\n            mail: user.mail,\r\n            login: user.login,\r\n            role: user.role\r\n          });\r\n        } catch (error: any) {\r\n          res.status(400).json({ error: error.message });\r\n        }\r\n      }),\r\n      updateUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const user = await mockUserServiceInstance.updateUser(parseInt(req.params.id), req.body);\r\n          res.json({\r\n            id: user.id,\r\n            name: user.name,\r\n            mail: user.mail,\r\n            role: user.role\r\n          });\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n      deleteUser: jest.fn().mockImplementation(async (req: any, res: any) => {\r\n        try {\r\n          const result = await mockUserServiceInstance.deleteUser(parseInt(req.params.id));\r\n          res.json(result);\r\n        } catch (error: any) {\r\n          res.status(404).json({ error: error.message });\r\n        }\r\n      }),\r\n    };\r\n\r\n    // Rotas de autenticação (públicas)\r\n    app.post('/api/auth/login', userController.login.bind(userController));\r\n\r\n    // Rotas protegidas (simulando middleware de auth)\r\n    app.get('/api/users', (req: any, res, next) => {\r\n      req.user = { id: 1, role: 'admin' };\r\n      next();\r\n    }, userController.getAllUsers.bind(userController));\r\n\r\n    app.get('/api/users/:id', (req: any, res, next) => {\r\n      req.user = { id: 1, role: 'admin' };\r\n      next();\r\n    }, userController.getUserById.bind(userController));\r\n\r\n    app.post('/api/users', (req: any, res, next) => {\r\n      req.user = { id: 1, role: 'admin' };\r\n      next();\r\n    }, userController.createUser.bind(userController));\r\n\r\n    app.put('/api/users/:id', (req: any, res, next) => {\r\n      req.user = { id: 1, role: 'admin' };\r\n      next();\r\n    }, userController.updateUser.bind(userController));\r\n\r\n    app.delete('/api/users/:id', (req: any, res, next) => {\r\n      req.user = { id: 1, role: 'admin' };\r\n      next();\r\n    }, userController.deleteUser.bind(userController));\r\n\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('POST /api/auth/login', () => {\r\n    it('should login successfully', async () => {\r\n      const loginData = {\r\n        login: 'joao123',\r\n        password: 'password123'\r\n      };\r\n\r\n      const loginResult = {\r\n        user: {\r\n          id: 1,\r\n          name: 'João Silva',\r\n          mail: 'joao@test.com',\r\n          login: 'joao123',\r\n          role: 'customer'\r\n        },\r\n        token: 'jwt_token_123'\r\n      };\r\n\r\n      mockUserServiceInstance.authenticateUser.mockResolvedValue(loginResult as any);\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(200);\r\n\r\n      expect(response.body).toEqual(loginResult);\r\n    });\r\n\r\n    it('should return error for invalid credentials', async () => {\r\n      const loginData = {\r\n        login: 'invalid',\r\n        password: 'wrong_password'\r\n      };\r\n\r\n      mockUserServiceInstance.authenticateUser.mockRejectedValue(new Error('Credenciais inválidas'));\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(401);\r\n\r\n      expect(response.body.error).toBe('Credenciais inválidas');\r\n    });\r\n  });\r\n\r\n  describe('GET /api/users', () => {\r\n    it('should return all users for admin', async () => {\r\n      const users = [\r\n        { id: 1, name: 'João', mail: 'joao@test.com', role: 'customer' },\r\n        { id: 2, name: 'Maria', mail: 'maria@test.com', role: 'admin' }\r\n      ];\r\n\r\n      mockUserServiceInstance.getAllUsers.mockResolvedValue(users as any);\r\n\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .expect(200);\r\n\r\n      expect(response.body).toEqual(users);\r\n    });\r\n\r\n    it('should handle service error', async () => {\r\n      mockUserServiceInstance.getAllUsers.mockRejectedValue(new Error('Database error'));\r\n\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .expect(500);\r\n\r\n      expect(response.body.error).toBe('Database error');\r\n    });\r\n  });\r\n\r\n  describe('GET /api/users/:id', () => {\r\n    it('should return user by id', async () => {\r\n      const user = { id: 1, name: 'João', mail: 'joao@test.com', role: 'customer' };\r\n      mockUserServiceInstance.getUserById.mockResolvedValue(user as any);\r\n\r\n      const response = await request(app)\r\n        .get('/api/users/1')\r\n        .expect(200);\r\n\r\n      expect(response.body).toEqual(user);\r\n      expect(mockUserServiceInstance.getUserById).toHaveBeenCalledWith(1);\r\n    });\r\n\r\n    it('should return 404 for non-existent user', async () => {\r\n      mockUserServiceInstance.getUserById.mockRejectedValue(new Error('Usuário não encontrado'));\r\n\r\n      const response = await request(app)\r\n        .get('/api/users/999')\r\n        .expect(404);\r\n\r\n      expect(response.body.error).toBe('Usuário não encontrado');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/users', () => {\r\n    it('should create user successfully', async () => {\r\n      const userData = {\r\n        name: 'João Silva',\r\n        mail: 'joao@test.com',\r\n        login: 'joao123',\r\n        password: 'password123',\r\n        role: 'customer'\r\n      };\r\n\r\n      const createdUser = {\r\n        id: 1,\r\n        name: userData.name,\r\n        mail: userData.mail,\r\n        login: userData.login,\r\n        role: userData.role\r\n      };\r\n\r\n      mockUserServiceInstance.createUser.mockResolvedValue(createdUser as any);\r\n\r\n      const response = await request(app)\r\n        .post('/api/users')\r\n        .send(userData)\r\n        .expect(201);\r\n\r\n      expect(response.body).toEqual({\r\n        id: createdUser.id,\r\n        name: createdUser.name,\r\n        mail: createdUser.mail,\r\n        login: createdUser.login,\r\n        role: createdUser.role\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/users/:id', () => {\r\n    it('should update user successfully', async () => {\r\n      const updateData = { name: 'João Santos' };\r\n      const updatedUser = { id: 1, name: 'João Santos', mail: 'joao@test.com', role: 'customer' };\r\n\r\n      mockUserServiceInstance.updateUser.mockResolvedValue(updatedUser as any);\r\n\r\n      const response = await request(app)\r\n        .put('/api/users/1')\r\n        .send(updateData)\r\n        .expect(200);\r\n\r\n      expect(response.body).toEqual({\r\n        id: updatedUser.id,\r\n        name: updatedUser.name,\r\n        mail: updatedUser.mail,\r\n        role: updatedUser.role\r\n      });\r\n\r\n      expect(mockUserServiceInstance.updateUser).toHaveBeenCalledWith(1, updateData);\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/users/:id', () => {\r\n    it('should delete user successfully', async () => {\r\n      mockUserServiceInstance.deleteUser.mockResolvedValue({ message: 'Usuário deletado com sucesso' } as any);\r\n\r\n      const response = await request(app)\r\n        .delete('/api/users/1')\r\n        .expect(200);\r\n\r\n      expect(response.body).toEqual({ message: 'Usuário deletado com sucesso' });\r\n      expect(mockUserServiceInstance.deleteUser).toHaveBeenCalledWith(1);\r\n    });\r\n\r\n    it('should return 404 for non-existent user', async () => {\r\n      mockUserServiceInstance.deleteUser.mockRejectedValue(new Error('Usuário não encontrado'));\r\n\r\n      const response = await request(app)\r\n        .delete('/api/users/999')\r\n        .expect(404);\r\n\r\n      expect(response.body.error).toBe('Usuário não encontrado');\r\n    });\r\n  });\r\n});"],"version":3}