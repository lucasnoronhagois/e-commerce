8e040098b382d24960a62d44d0f12e8c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do jwt
jest.mock('jsonwebtoken');
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const auth_1 = require("../../src/middlewares/auth");
const mockJwt = jsonwebtoken_1.default;
describe('Auth Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        mockRequest = {
            headers: {}
        };
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        mockNext = jest.fn();
        jest.clearAllMocks();
    });
    describe('authenticateToken', () => {
        it('should authenticate valid token', async () => {
            const token = 'valid.jwt.token';
            const decodedToken = { id: 1, role: 'customer' };
            mockRequest.headers = {
                authorization: `Bearer ${token}`
            };
            mockJwt.verify.mockImplementation((token, secret, callback) => {
                callback(null, decodedToken);
            });
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockJwt.verify).toHaveBeenCalledWith(token, process.env.JWT_SECRET, expect.any(Function));
            expect(mockRequest.user).toEqual(decodedToken);
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should reject request without authorization header', async () => {
            mockRequest.headers = {};
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token de acesso requerido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should reject request with invalid authorization format', async () => {
            mockRequest.headers = {
                authorization: 'InvalidFormat'
            };
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token de acesso requerido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should reject request with invalid token', async () => {
            const token = 'invalid.jwt.token';
            mockRequest.headers = {
                authorization: `Bearer ${token}`
            };
            mockJwt.verify.mockImplementation((token, secret, callback) => {
                callback(new Error('Invalid token'), null);
            });
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockJwt.verify).toHaveBeenCalledWith(token, process.env.JWT_SECRET, expect.any(Function));
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token inv치lido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should reject request with expired token', async () => {
            const token = 'expired.jwt.token';
            mockRequest.headers = {
                authorization: `Bearer ${token}`
            };
            mockJwt.verify.mockImplementation((token, secret, callback) => {
                const error = new Error('Token expired');
                error.name = 'TokenExpiredError';
                callback(error, null);
            });
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token inv치lido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle malformed token', async () => {
            const token = 'malformed.token';
            mockRequest.headers = {
                authorization: `Bearer ${token}`
            };
            mockJwt.verify.mockImplementation((token, secret, callback) => {
                const error = new Error('Malformed token');
                error.name = 'JsonWebTokenError';
                callback(error, null);
            });
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token inv치lido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle unexpected errors', async () => {
            const token = 'valid.jwt.token';
            mockRequest.headers = {
                authorization: `Bearer ${token}`
            };
            mockJwt.verify.mockImplementation((token, secret, callback) => {
                callback(new Error('Unexpected error'), null);
            });
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token inv치lido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle token without Bearer prefix', async () => {
            const token = 'valid.jwt.token';
            mockRequest.headers = {
                authorization: token
            };
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token de acesso requerido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle empty token after Bearer', async () => {
            mockRequest.headers = {
                authorization: 'Bearer '
            };
            await (0, auth_1.authenticateToken)(mockRequest, mockResponse, mockNext);
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token de acesso requerido' });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,