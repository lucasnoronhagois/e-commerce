45db0493628026db21c915d3caf1ecd7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const models_1 = require("../models");
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const sequelize_1 = require("sequelize");
class UserService {
    async createUser(data) {
        // Verificar se login ou email já existem
        const existingUser = await models_1.User.findOne({
            where: {
                [sequelize_1.Op.or]: [
                    { login: data.login },
                    { mail: data.mail }
                ]
            }
        });
        if (existingUser) {
            throw new Error('Login ou email já existem');
        }
        // Hash da senha
        const hashedPassword = await bcrypt_1.default.hash(data.password, 10);
        return await models_1.User.create({
            ...data,
            password: hashedPassword,
            role: data.role || 'customer'
        });
    }
    async getAllUsers() {
        return await models_1.User.findAll({
            where: { is_deleted: false },
            attributes: { exclude: ['password'] }
        });
    }
    async getUserById(id) {
        const user = await models_1.User.findOne({
            where: { id, is_deleted: false },
            attributes: { exclude: ['password'] }
        });
        if (!user) {
            throw new Error('Usuário não encontrado');
        }
        return user;
    }
    async updateUser(id, data) {
        const user = await models_1.User.findOne({
            where: { id, is_deleted: false }
        });
        if (!user) {
            throw new Error('Usuário não encontrado');
        }
        // Se a senha está sendo atualizada, fazer hash
        if (data.password) {
            data.password = await bcrypt_1.default.hash(data.password, 10);
        }
        return await user.update(data);
    }
    async deleteUser(id) {
        const user = await models_1.User.findOne({
            where: { id, is_deleted: false }
        });
        if (!user) {
            throw new Error('Usuário não encontrado');
        }
        await user.update({ is_deleted: true });
        return { message: 'Usuário deletado com sucesso' };
    }
    async authenticateUser(login, password) {
        const user = await models_1.User.findOne({
            where: { login, is_deleted: false },
            include: [{
                    association: 'customerDetail',
                    required: false
                }]
        });
        if (!user) {
            throw new Error('Credenciais inválidas');
        }
        const isValidPassword = await bcrypt_1.default.compare(password, user.password);
        if (!isValidPassword) {
            throw new Error('Credenciais inválidas');
        }
        const token = jsonwebtoken_1.default.sign({
            id: user.id,
            login: user.login,
            role: user.role
        }, process.env.JWT_SECRET || 'fallback_secret', { expiresIn: process.env.JWT_EXPIRES_IN || '24h' });
        // Se for customer, incluir dados do customerDetail
        if (user.role === 'customer' && user.customerDetail) {
            return {
                user: {
                    id: user.id,
                    name: user.name,
                    mail: user.mail,
                    login: user.login,
                    role: user.role,
                    phone: user.customerDetail.phone,
                    address: user.customerDetail.address,
                    zip_code: user.customerDetail.zip_code,
                    document: user.customerDetail.document,
                    neighborhood: user.customerDetail.neighborhood,
                    city: user.customerDetail.city,
                    state: user.customerDetail.state,
                    address_number: user.customerDetail.address_number
                },
                token
            };
        }
        // Se for admin, retornar apenas dados básicos
        return {
            user: {
                id: user.id,
                name: user.name,
                mail: user.mail,
                login: user.login,
                role: user.role
            },
            token
        };
    }
    async createCustomer(data) {
        // Verificar se login ou email já existem
        const existingUser = await models_1.User.findOne({
            where: {
                [sequelize_1.Op.or]: [
                    { login: data.login },
                    { mail: data.mail }
                ]
            }
        });
        if (existingUser) {
            throw new Error('Login ou email já existem');
        }
        const hashedPassword = await bcrypt_1.default.hash(data.password, 10);
        // Criar usuário com role customer
        const user = await models_1.User.create({
            name: data.name,
            mail: data.mail,
            login: data.login,
            password: hashedPassword,
            role: 'customer'
        });
        // Criar customer_detail se houver dados específicos
        if (data.phone || data.address || data.document) {
            await models_1.CustomerDetail.create({
                user_id: user.id,
                phone: data.phone,
                address: data.address,
                zip_code: data.zip_code,
                document: data.document,
                neighborhood: data.neighborhood,
                city: data.city,
                state: data.state,
                address_number: data.address_number
            });
        }
        return user;
    }
}
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,