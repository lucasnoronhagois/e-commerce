{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\src\\services\\userService.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\src\\services\\userService.ts"],"sourcesContent":["import { User, CustomerDetail } from '../models';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Op } from 'sequelize';\r\n\r\nexport class UserService {\r\n  async createUser(data: {\r\n    name: string;\r\n    mail: string;\r\n    login: string;\r\n    password: string;\r\n    role?: string;\r\n  }) {\r\n    // Verificar se login ou email já existem\r\n    const existingUser = await User.findOne({\r\n      where: {\r\n        [Op.or]: [\r\n          { login: data.login },\r\n          { mail: data.mail }\r\n        ]\r\n      }\r\n    });\r\n\r\n    if (existingUser) {\r\n      throw new Error('Login ou email já existem');\r\n    }\r\n\r\n    // Hash da senha\r\n    const hashedPassword = await bcrypt.hash(data.password, 10);\r\n\r\n    return await User.create({\r\n      ...data,\r\n      password: hashedPassword,\r\n      role: data.role || 'customer'\r\n    });\r\n  }\r\n\r\n  async getAllUsers() {\r\n    return await User.findAll({\r\n      where: { is_deleted: false },\r\n      attributes: { exclude: ['password'] }\r\n    });\r\n  }\r\n\r\n  async getUserById(id: number) {\r\n    const user = await User.findOne({\r\n      where: { id, is_deleted: false },\r\n      attributes: { exclude: ['password'] }\r\n    });\r\n    \r\n    if (!user) {\r\n      throw new Error('Usuário não encontrado');\r\n    }\r\n    \r\n    return user;\r\n  }\r\n\r\n  async updateUser(id: number, data: {\r\n    name?: string;\r\n    mail?: string;\r\n    login?: string;\r\n    password?: string;\r\n    role?: string;\r\n  }) {\r\n    const user = await User.findOne({\r\n      where: { id, is_deleted: false }\r\n    });\r\n    \r\n    if (!user) {\r\n      throw new Error('Usuário não encontrado');\r\n    }\r\n\r\n    // Se a senha está sendo atualizada, fazer hash\r\n    if (data.password) {\r\n      data.password = await bcrypt.hash(data.password, 10);\r\n    }\r\n    \r\n    return await user.update(data);\r\n  }\r\n\r\n  async deleteUser(id: number) {\r\n    const user = await User.findOne({\r\n      where: { id, is_deleted: false }\r\n    });\r\n    \r\n    if (!user) {\r\n      throw new Error('Usuário não encontrado');\r\n    }\r\n    \r\n    await user.update({ is_deleted: true });\r\n    return { message: 'Usuário deletado com sucesso' };\r\n  }\r\n\r\n  async authenticateUser(login: string, password: string) {\r\n    const user = await User.findOne({\r\n      where: { login, is_deleted: false },\r\n      include: [{\r\n        association: 'customerDetail',\r\n        required: false\r\n      }]\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error('Credenciais inválidas');\r\n    }\r\n\r\n    const isValidPassword = await bcrypt.compare(password, user.password);\r\n    \r\n    if (!isValidPassword) {\r\n      throw new Error('Credenciais inválidas');\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { \r\n        id: user.id, \r\n        login: user.login, \r\n        role: user.role \r\n      },\r\n      process.env.JWT_SECRET || 'fallback_secret',\r\n      { expiresIn: process.env.JWT_EXPIRES_IN || '24h' } as jwt.SignOptions\r\n    );\r\n\r\n    // Se for customer, incluir dados do customerDetail\r\n    if (user.role === 'customer' && user.customerDetail) {\r\n      return {\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          mail: user.mail,\r\n          login: user.login,\r\n          role: user.role,\r\n          phone: user.customerDetail.phone,\r\n          address: user.customerDetail.address,\r\n          zip_code: user.customerDetail.zip_code,\r\n          document: user.customerDetail.document,\r\n          neighborhood: user.customerDetail.neighborhood,\r\n          city: user.customerDetail.city,\r\n          state: user.customerDetail.state,\r\n          address_number: user.customerDetail.address_number\r\n        },\r\n        token\r\n      };\r\n    }\r\n\r\n    // Se for admin, retornar apenas dados básicos\r\n    return {\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        mail: user.mail,\r\n        login: user.login,\r\n        role: user.role\r\n      },\r\n      token\r\n    };\r\n  }\r\n\r\n  async createCustomer(data: {\r\n    name: string;\r\n    mail: string;\r\n    login: string;\r\n    password: string;\r\n    phone?: string;\r\n    address?: string;\r\n    zip_code?: string;\r\n    document?: string;\r\n    neighborhood?: string;\r\n    city?: string;\r\n    state?: string;\r\n    address_number?: string;\r\n  }) {\r\n    // Verificar se login ou email já existem\r\n    const existingUser = await User.findOne({\r\n      where: {\r\n        [Op.or]: [\r\n          { login: data.login },\r\n          { mail: data.mail }\r\n        ]\r\n      }\r\n    });\r\n\r\n    if (existingUser) {\r\n      throw new Error('Login ou email já existem');\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(data.password, 10);\r\n    \r\n    // Criar usuário com role customer\r\n    const user = await User.create({\r\n      name: data.name,\r\n      mail: data.mail,\r\n      login: data.login,\r\n      password: hashedPassword,\r\n      role: 'customer'\r\n    });\r\n\r\n    // Criar customer_detail se houver dados específicos\r\n    if (data.phone || data.address || data.document) {\r\n      await CustomerDetail.create({\r\n        user_id: user.id,\r\n        phone: data.phone,\r\n        address: data.address,\r\n        zip_code: data.zip_code,\r\n        document: data.document,\r\n        neighborhood: data.neighborhood,\r\n        city: data.city,\r\n        state: data.state,\r\n        address_number: data.address_number\r\n      });\r\n    }\r\n\r\n    return user;\r\n  }\r\n}\r\n"],"version":3}