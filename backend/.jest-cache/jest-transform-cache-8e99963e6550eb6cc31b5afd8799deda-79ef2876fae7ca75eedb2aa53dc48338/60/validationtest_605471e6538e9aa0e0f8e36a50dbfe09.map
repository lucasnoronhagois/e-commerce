{"file":"E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\middlewares\\validation.test.ts","mappings":"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","names":[],"sources":["E:\\Curso JS\\Deploy\\Commerce\\backend\\tests\\middlewares\\validation.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport * as yup from 'yup';\r\nimport { validate, validateParams } from '../../src/middlewares/validation';\r\n\r\ndescribe('Validation Middleware', () => {\r\n  let mockRequest: Partial<Request>;\r\n  let mockResponse: Partial<Response>;\r\n  let mockNext: NextFunction;\r\n\r\n  beforeEach(() => {\r\n    mockRequest = {};\r\n    mockResponse = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn().mockReturnThis()\r\n    };\r\n    mockNext = jest.fn();\r\n  });\r\n\r\n  describe('validate', () => {\r\n    const testSchema = yup.object({\r\n      name: yup.string().required('Nome é obrigatório'),\r\n      email: yup.string().email('Email inválido').required('Email é obrigatório'),\r\n      age: yup.number().positive('Idade deve ser positiva').required('Idade é obrigatória')\r\n    });\r\n\r\n    it('should pass validation with valid data', async () => {\r\n      mockRequest.body = {\r\n        name: 'João Silva',\r\n        email: 'joao@test.com',\r\n        age: 25\r\n      };\r\n\r\n      const middleware = validate(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockResponse.status).not.toHaveBeenCalled();\r\n      expect(mockResponse.json).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should return validation errors for invalid data', async () => {\r\n      mockRequest.body = {\r\n        name: '',\r\n        email: 'invalid-email',\r\n        age: -5\r\n      };\r\n\r\n      const middleware = validate(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        errors: [\r\n          { message: 'Nome é obrigatório' },\r\n          { message: 'Email inválido' },\r\n          { message: 'Idade deve ser positiva' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    it('should return validation errors for missing required fields', async () => {\r\n      mockRequest.body = {\r\n        name: 'João Silva'\r\n        // email and age missing\r\n      };\r\n\r\n      const middleware = validate(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        errors: [\r\n          { message: 'Email é obrigatório' },\r\n          { message: 'Idade é obrigatória' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    it('should handle unexpected validation errors', async () => {\r\n      // Mock yup to throw a non-ValidationError\r\n      const mockSchema = {\r\n        validate: jest.fn().mockRejectedValue(new Error('Unexpected error'))\r\n      } as any;\r\n\r\n      mockRequest.body = { name: 'João' };\r\n\r\n      const middleware = validate(mockSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        error: 'Erro interno do servidor'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('validateParams', () => {\r\n    const testSchema = yup.object({\r\n      id: yup.number().positive('ID deve ser positivo').required('ID é obrigatório')\r\n    });\r\n\r\n    it('should pass validation with valid params', async () => {\r\n      mockRequest.params = {\r\n        id: '123'\r\n      };\r\n\r\n      const middleware = validateParams(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockResponse.status).not.toHaveBeenCalled();\r\n      expect(mockResponse.json).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should return validation errors for invalid params', async () => {\r\n      mockRequest.params = {\r\n        id: '-1'\r\n      };\r\n\r\n      const middleware = validateParams(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        errors: [\r\n          { message: 'ID deve ser positivo' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    it('should return validation errors for missing params', async () => {\r\n      mockRequest.params = {};\r\n\r\n      const middleware = validateParams(testSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        errors: [\r\n          { message: 'ID é obrigatório' }\r\n        ]\r\n      });\r\n    });\r\n\r\n    it('should handle unexpected validation errors in params', async () => {\r\n      const mockSchema = {\r\n        validate: jest.fn().mockRejectedValue(new Error('Unexpected error'))\r\n      } as any;\r\n\r\n      mockRequest.params = { id: '123' };\r\n\r\n      const middleware = validateParams(mockSchema);\r\n      await middleware(mockRequest as Request, mockResponse as Response, mockNext);\r\n\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\r\n      expect(mockResponse.json).toHaveBeenCalledWith({\r\n        error: 'Erro interno do servidor'\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"version":3}