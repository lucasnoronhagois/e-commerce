505f4fbf002d0c2d1fb06de1876d60dc
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const yup = __importStar(require("yup"));
const validation_1 = require("../../src/middlewares/validation");
describe('Validation Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        mockRequest = {};
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        mockNext = jest.fn();
    });
    describe('validate', () => {
        const testSchema = yup.object({
            name: yup.string().required('Nome é obrigatório'),
            email: yup.string().email('Email inválido').required('Email é obrigatório'),
            age: yup.number().positive('Idade deve ser positiva').required('Idade é obrigatória')
        });
        it('should pass validation with valid data', async () => {
            mockRequest.body = {
                name: 'João Silva',
                email: 'joao@test.com',
                age: 25
            };
            const middleware = (0, validation_1.validate)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should return validation errors for invalid data', async () => {
            mockRequest.body = {
                name: '',
                email: 'invalid-email',
                age: -5
            };
            const middleware = (0, validation_1.validate)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                errors: [
                    { message: 'Nome é obrigatório' },
                    { message: 'Email inválido' },
                    { message: 'Idade deve ser positiva' }
                ]
            });
        });
        it('should return validation errors for missing required fields', async () => {
            mockRequest.body = {
                name: 'João Silva'
                // email and age missing
            };
            const middleware = (0, validation_1.validate)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                errors: [
                    { message: 'Email é obrigatório' },
                    { message: 'Idade é obrigatória' }
                ]
            });
        });
        it('should handle unexpected validation errors', async () => {
            // Mock yup to throw a non-ValidationError
            const mockSchema = {
                validate: jest.fn().mockRejectedValue(new Error('Unexpected error'))
            };
            mockRequest.body = { name: 'João' };
            const middleware = (0, validation_1.validate)(mockSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                error: 'Erro interno do servidor'
            });
        });
    });
    describe('validateParams', () => {
        const testSchema = yup.object({
            id: yup.number().positive('ID deve ser positivo').required('ID é obrigatório')
        });
        it('should pass validation with valid params', async () => {
            mockRequest.params = {
                id: '123'
            };
            const middleware = (0, validation_1.validateParams)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should return validation errors for invalid params', async () => {
            mockRequest.params = {
                id: '-1'
            };
            const middleware = (0, validation_1.validateParams)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                errors: [
                    { message: 'ID deve ser positivo' }
                ]
            });
        });
        it('should return validation errors for missing params', async () => {
            mockRequest.params = {};
            const middleware = (0, validation_1.validateParams)(testSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                errors: [
                    { message: 'ID é obrigatório' }
                ]
            });
        });
        it('should handle unexpected validation errors in params', async () => {
            const mockSchema = {
                validate: jest.fn().mockRejectedValue(new Error('Unexpected error'))
            };
            mockRequest.params = { id: '123' };
            const middleware = (0, validation_1.validateParams)(mockSchema);
            await middleware(mockRequest, mockResponse, mockNext);
            expect(mockNext).not.toHaveBeenCalled();
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                error: 'Erro interno do servidor'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,