version: '3.8'

services:
  # Banco de dados MySQL para produção
  database:
    image: mysql:8.0
    container_name: commerce_mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-K41pt0k41}
      MYSQL_DATABASE: ${DB_NAME:-commerce}
    ports:
      - "3307:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
    networks:
      - commerce_network
    # Configurações de produção para MySQL
    command: --default-authentication-plugin=mysql_native_password

  # Backend API para produção
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: commerce_backend_prod
    restart: always
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-commerce}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-K41pt0k41}
      - JWT_SECRET=${JWT_SECRET:-1q2wsenhasecreta}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-8h}
      - PORT=${PORT:-3001}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME:-dbd6s4f4s}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY:-944725155657453}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET:-N8UGlKvzQSINogt2nKKlG26qcGQ}
    ports:
      - "3001:3001"
    depends_on:
      - database
    networks:
      - commerce_network
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React para produção
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: commerce_frontend_prod
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3001}
    networks:
      - commerce_network

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: commerce_nginx
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - commerce_network

# Volumes para persistência de dados
volumes:
  mysql_prod_data:

# Rede para comunicação entre containers
networks:
  commerce_network:
    driver: bridge
